generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comics {
  comic_id    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  title       String    @db.VarChar(255)
  description String?
  genre       String?   @db.VarChar(100)  // Added to align with shared types
  characters  Json?
  setting     Json?
  template    String?   @db.VarChar(50)   // Added to align with shared types
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  users       users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  pages       pages[]
  usage_logs  panel_usage_log[]

  @@index([user_id], map: "idx_comics_user_id")
}

model pages {
  page_id     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comic_id    String    @db.Uuid
  page_number Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  comics      comics    @relation(fields: [comic_id], references: [comic_id], onDelete: Cascade, onUpdate: NoAction)
  panels      panels[]

  @@unique([comic_id, page_number])
  @@index([comic_id], map: "idx_pages_comic_id")
}

model panels {
  panel_id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  page_id         String    @db.Uuid
  panel_number    Int
  image_url       String?
  prompt          String?
  dialogue        String?
  layout_position Json?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  pages           pages     @relation(fields: [page_id], references: [page_id], onDelete: Cascade, onUpdate: NoAction)
  usage_logs      panel_usage_log[]

  @@unique([page_id, panel_number])
  @@index([page_id], map: "idx_panels_page_id")
}

model user_profiles {
  profile_id   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @unique @db.Uuid
  display_name String?   @db.VarChar(100)
  bio          String?
  avatar_url   String?
  preferences  Json?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_profiles_user_id")
}

model users {
  user_id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username         String?        @unique @db.VarChar(50)
  email            String?        @unique @db.VarChar(255)
  created_at       DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?      @default(now()) @db.Timestamptz(6)
  auth_provider_id String         @unique @db.VarChar(255)
  comics           comics[]
  user_profiles    user_profiles?
  user_credits     user_credits?
  credit_purchases credit_purchases[]
  panel_usage_log  panel_usage_log[]

  @@index([auth_provider_id], map: "idx_users_auth_provider_id")
  @@index([email], map: "idx_users_email")
}

model user_credits {
  user_id           String    @id @db.Uuid
  panel_balance     Int       @default(20)
  last_purchased_at DateTime? @db.Timestamptz(6)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  users             users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([last_purchased_at], map: "idx_user_credits_last_purchase")
}

model credit_purchases {
  purchase_id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  stripe_charge_id String    @unique @db.VarChar(255)
  amount_dollars   Int
  panels_purchased Int
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  users            users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_credit_purchases_user_id")
  @@index([created_at], map: "idx_credit_purchases_created_at")
}

model panel_usage_log {
  usage_id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String    @db.Uuid
  comic_id          String?   @db.Uuid
  panel_id          String?   @db.Uuid
  credits_consumed  Int       @default(1)
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  users             users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  comics            comics?   @relation(fields: [comic_id], references: [comic_id], onDelete: SetNull, onUpdate: NoAction)
  panels            panels?   @relation(fields: [panel_id], references: [panel_id], onDelete: SetNull, onUpdate: NoAction)

  @@index([user_id], map: "idx_panel_usage_user_id")
  @@index([comic_id], map: "idx_panel_usage_comic_id")
  @@index([created_at], map: "idx_panel_usage_created_at")
}

model stripe_events {
  event_id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stripe_event_id   String    @unique @db.VarChar(255)
  event_type        String    @db.VarChar(100)
  related_charge_id String?   @db.VarChar(255)
  processed_at      DateTime? @default(now()) @db.Timestamptz(6)
  metadata          Json?

  @@index([event_type], map: "idx_stripe_events_event_type")
  @@index([processed_at], map: "idx_stripe_events_processed_at")
}
